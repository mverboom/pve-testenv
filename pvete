#!/usr/bin/env bash

declare -A BRIDGE CMDMACRO

usage() {
   echo "$0 <option> <command>"
   echo
   echo "  -c <cfgfile>       Use specific config file"
   echo "  -d                 Dryrun, don't execute"
   echo "  createtemplate     Create/overwrite template on server"
   echo "  deploy <drawing>   Deploy containers accoring to drawio drawing"
   echo "  modify <drawing>   Attempt to apply changes to deployed drawing setup"
   echo "  parse <drawing>    Attempt to parse the drawing and show statistics, no actions taken"
   echo "  list               Show deployed containers"
   echo "  enter <name>       Start shell on container"
   echo "  exec <name> <cmd>  Execute cmd in container"
   echo "  execall <cmd>      Execute cmd in all containers"
   echo "  restart <name>     Restart container"
   echo "  restartall         Restart all containers"
   echo "  startall           Start all containers"
   echo "  stopall            Stop all containers"
   echo "  destroyall         Destroy all containers and supporting services"
   exit 1
}

runjob() {
      "$@" &
      running[$slot]="$!"
      if test "${#running[*]}" -eq $CTJOBS; then
         wait -p pid -n ${running[*]}
         for slot in ${!running[@]}; do
            test "${running[$slot]}" = "$pid" && break
         done
         unset 'running[slot]'
      else
         slot=$(( slot + 1 ))
      fi
}

runend() {
   while test "${#running[*]}" -gt 0; do
      wait -p pid -n ${running[*]}
      for slot in ${!running[@]}; do
         test "${running[$slot]}" = "$pid" && break
      done
      unset 'running[slot]'
   done
}

# ToDo: change to read current config?
getcts() {
   while read -r ctid ctname; do
      cts[$ctid]="$ctname"
   done < <( ssh "${CTSERVER}" "cat ${CTSHARED}/deployed" 2> /dev/null)
   test "${#cts[*]}" -eq 0 && { echo "No deployed containers found"; usage; }
}

getctid() {
   local id=0
   for ctid in "${!cts[@]}"; do
      test "${cts[$ctid]}" = "$1" && { id="$ctid"; break; }
   done
   test "$id" = "0" && { echo "Host $1 not found"; usage; }
   echo "$id"
}

findbridge() {
   net="$1"
   bridge="${BRIDGE[default]}"
   for brname in "${!BRIDGE[@]}";do
      [[ " ${BRIDGE[$brname]} " =~ " ${net} " ]] && bridge="$brname"
   done
   echo "$bridge"
}

createtemplate() {
   scriptloc="$(dirname $(realpath "$0"))"
   test -e "$scriptloc/_pvete-createtemplate" || { echo "Unable to find _pvete-createtemplate"; exit 1; }
   scp -q "$scriptloc/_pvete-createtemplate" "$CTSERVER:/tmp/" || { echo "Unable to copy script"; exit 1; }
   ssh "${CTSERVER}" "/tmp/_pvete-createtemplate $CTTEMPLATE"
   ssh "${CTSERVER}" "rm -f /tmp/_pvete-createtemplate" || { echo "Unable to remove script"; exit 1; }
}

servicesexpn() {
   local cmdline port proto cmd line

   while read -r line; do
      port="${line/\/*/}"
      proto="${line/ */}"
      proto="${proto/*\//}"
      cmd="${line/$port\/$proto /}"

      cmdline=( "socat" )
      case "$proto" in
      "udp")
         cmdline+=( "udp-listen:$port,fork,reuseaddr" )
      ;;
      "dtls")
         cmdline+=( "openssl-dtls-server:$port,fork,reuseaddr,cert=/shared/cert.crt,key=/shared/cert.key,verify=0" )
      ;;
      "tcp")
         cmdline+=( "tcp-listen:$port,fork,reuseaddr" )
      ;;
      "tls")
         cmdline+=( "openssl-listen:$port,fork,reuseaddr,cert=/shared/cert.crt,key=/shared/cert.key,verify=0" )
      ;;
      *) echo "Unknown protocol $proto, aborting"; exit 1 ;;
      esac
      if test "${cmd// /}" = "${cmd}" && test "${CMDMACRO[$cmd]}" != ""; then
         cmdline+=( "SYSTEM:\"${CMDMACRO[$cmd]}\"" )
      else
         cmdline+=( "SYSTEM:\"$cmd\"" )
      fi
      echo "${cmdline[@]}"
   done < <(echo "$*" | sed "s/@/\n/g" )
}

parsedrawing() {
   drawio="$1"
   ! test -e "$drawio" && { echo "Unable to load drawing."; exit 1; }

   echo -n "Converting network drawing..."
   while read -r line; do
      unset id
      [[ "$line" =~ id=\"([^\"]+)\" ]] && id="${BASH_REMATCH[1]}"
      test "${id}" = "1" && continue
      unset value
      [[ "$line" =~ value=\"([^\"]+)\" ]] && value=$(echo "${BASH_REMATCH[1]}" | sed 's/&lt;[/]*div&gt;/@/g; s/&quot;/"/g; s/&#39;/'\''/g; s/&[lg]t;/#/g; s/#[^#]*#//g; s/@@/@/g; s/@$//; s/^@//')
      unset parent
      [[ "$line" =~ parent=\"([^\"]+)\" ]] && parent="${BASH_REMATCH[1]}"

      if [[ "$line" =~ .*(edgeLabel).* ]]; then
         test "${value/\/*/}" = "${value}" && { echo "IP address ${value} not in CIDR format"; exit 1; }
         ips[$parent]="${value}"
      elif test "$value" != ""; then
         unset shape
         [[ "$line" =~ shape=([^;]+) ]] && shape="${BASH_REMATCH[1]}"
         if test "$shape" = "cloud"; then # Cloud shape is a vlan
            nets[$id]="${value/@*/}"
         elif test "$shape" = "document"; then # Document is routing table
            routes[$id]="$value"
         elif test "$shape" = "process"; then # Process are service to run
            services[$id]="$value"
         elif test "${parent}" = "1"; then # this is a host
            hosts[$id]="${value/@*/}"
            [[ "$line" =~ (dashed=1\;) ]] && hostsignore[$id]="$value"
         fi
      else
         # This is a link between objects
         unset srcid tgtid
         [[ "$line" =~ source=\"([^\"]+)\" ]] && srcid="${BASH_REMATCH[1]}"
         [[ "$line" =~ target=\"([^\"]+)\" ]] && tgtid="${BASH_REMATCH[1]}"
         test "$srcid" != "" -a "$tgtid" != "" && links[$id]="@${srcid}@${tgtid}@"
      fi
   done < <( grep '<mxCell' "$drawio" )

   # Search for default gateways per vlan
   for netid in "${!nets[@]}"; do
      for linkid in "${!links[@]}"; do
         if test "$( echo "${links[$linkid]}" | grep "@${netid}@")" != ""; then
            test "${ips[$linkid]/ gw/}" = "${ips[$linkid]}" && continue
            gws[${nets[$netid]}]="${ips[$linkid]/\/*/}"
         fi
      done
   done
   echo "done"
   echo "Found ${#hosts[*]} hosts, ${#nets[*]} networks, ${#links[*]} links, ${#routes[*]} routing tables and ${#services[*]} service lists."
   test "${#hosts[*]}" -eq 0 && { echo "No hosts found."; exit 1; }
}

generatectconfig() {
   echo -n "Generating container configuration..."
   # Search for unconnected servicelist, apply to all hosts
   for service in "${!services[@]}"; do
      found=0
      for linkid in ${!links[@]}; do
         if test "$( echo "${links[$linkid]}" | grep "@${service}@")" != ""; then
            found=1
         fi
      done
      test "$found" -eq 0 && globalservices+=( "$(servicesexpn "${services[$service]}")" )
   done

   CTID=1

   for hostid in "${!hosts[@]}"; do
      unset ctcreate
      ctcreate=( "$tmplstorage:vztmpl/${CTTEMPLATE}.tar.gz" --hostname "${hosts[$hostid]}" )
      cthostnames[$CTID]="${hosts[$hostid]}"
      routing=0
      ifs=0
      # Find routing tables
      for linkid in "${!links[@]}"; do
         if [[ ${links[$linkid]} =~ @${hostid}@ ]]; then
            for connid in ${links[$linkid]//@/ }; do
               if test "${routes[$connid]}" != ""; then
                  hostroutes[$CTID]="${hostroutes[$CTID]}${routes[$connid]//@/\\n}\n"
                  routing=1
               fi
            done
         fi
      done
      # Find network interfaces
      for linkid in "${!links[@]}"; do
         if [[ ${links[$linkid]} =~ @${hostid}@ ]]; then
            for connid in ${links[$linkid]//@/ }; do
               net="${nets[$connid]}"
               if test "$net" != ""; then
                  ifcfg="name=${net},bridge=$(findbridge "$net")"
                  test "${ips[$linkid]}" != "" && ifcfg="${ifcfg},ip=${ips[$linkid]/ gw/}"
                  hostsfile+=( "${ips[$linkid]/\/*/} ${hosts[$hostid]}-${net}" )
                  test "$routing" -eq 0 -a "${gws[$net]}" != "" && ifcfg="${ifcfg},gw=${gws[$net]}"
                  test "${net/vlan/}" != "${net}" && ifcfg="${ifcfg},tag=${net/vlan/}"
                  ctcreate+=( "--net${ifs}" "$ifcfg" )
                  ifs=$(( ifs + 1 ))
               fi
            done
         fi
      done
      # Find services
      for linkid in "${!links[@]}"; do
         if [[ ${links[$linkid]} =~ @${hostid}@ ]]; then
            for connid in ${links[$linkid]//@/ }; do
               if test "${services[$connid]}" != ""; then
                  hostservices[$CTID]="${hostservices[$CTID]}$(servicesexpn "${services[$connid]}")\n"
               fi
            done
         fi
      done
      # Create full command to run
      ctcreate+=( --onboot 1 --start 1 --rootfs "${CTROOTFS:-pve}:${CTROOTSIZE:-1}" --memory "${CTMEM:-1024}" --cores "${CTCORES:-1}" --unprivileged 1 --mp0 "$CTSHARED,mp=/shared" ${CTOPTIONS[@]} )
      if test "${hostsignore[$hostid]}" = ""; then
         hostnames[$CTID]="${hosts[$hostid]}"
         ctcmds[$CTID]="${ctcreate[*]}"
         CTID=$(( CTID + 1 ))
      fi
   done
   echo "done"
}

parse() {
   start=$(date "+%s%N")
   # Read new configuration
   declare -A hosts nets ips links routes hostsignore services ctcmds gws
   declare -a globalservices hostroutes hostsfile hostservices hostnames
   parsedrawing "$1"
   drawend=$(date "+%s%N")
   drawing=$(printf "%0.2f" $(echo "($drawend - $start) / 1000000000" | bc -l))
   echo "Drawing parsing: $drawing seconds"
   generatectconfig
   end=$(date "+%s%N")
   configparsing=$(printf "%0.2f" $(echo "($end - $drawend) / 1000000000" | bc -l))
   time=$(printf "%0.2f" $(echo "($end - $start) / 1000000000" | bc -l))
   echo "Configuration generation: $configparsing seconds"
   echo "Total time: $time seconds"
}

modify() {
   # Read current configuration
   . <(ssh "${CTSERVER}" "cat ${CTSHARED}/config.cfg" | sed "s/ / old/2")

   tmplstorage="$(ssh "${CTSERVER}" "pvesm status --content vztmpl | sed -n '2 s/ .*//p'")"
   test "$tmplstorage" = "" && { echo "Unable to find template storage"; exit 1; }

   # Read new configuration
   declare -A hosts nets ips links routes hostsignore services ctcmds gws
   declare -a globalservices hostroutes hostsfile hostservices hostnames
   parsedrawing "$1"
   generatectconfig

   # Generate ctids for new setup finding them in the old config
   for hostid in ${!hostnames[*]}; do
      for oldhostid in ${!oldhostnames[*]}; do
         test "${oldhostnames[$oldhostid]}" = "${hostnames[$hostid]}" && { ctids[$hostid]="${oldctids[$oldhostid]}"; break ; }
      done
   done

   # Find hosts that need to be removed
   for hostid in "${!oldhostnames[@]}"; do
      hostname="${oldhostnames[$hostid]}"
      if [[ ! " ${hostnames[@]} " =~ " ${hostname} " ]]; then
         echo "Remove ${hostname}"
         # destroy container
         runcmd ssh "${CTSERVER}" "pct stop ${oldctids[$hostid]}; pct destroy ${oldctids[$hostid]}"
         runcmd ssh "${CTSERVER}" "rm -f ${CTSHARED}/routes-${hostname} ${CTSHARED}/services-${hostname}"
      fi
   done

   # Generate hosts file
   printf "%s\n" "${hostsfile[@]}" | runcmd ssh "$CTSERVER" "cat > \"${CTSHARED}\"/hosts"

   # Generate service and routing files
   runcmd ssh "${CTSERVER}" "rm -f ${CTSHARED}/routes-* ${CTSHARED}/services-*"
   for hostid in "${!hostnames[@]}"; do
      test "${hostroutes[$hostid]}" != "" && echo -e "${hostroutes[$hostid]}" | runcmd ssh "${CTSERVER}" "cat > \"${CTSHARED}/routes-${hostnames[$hostid]}\""
      test "${hostservices[$hostid]}" != "" && echo -e "${hostservices[$hostid]}" | runcmd ssh "${CTSERVER}" "cat > \"${CTSHARED}/services-${hostnames[$hostid]}\""
   done

   restart=()
   # Tag all hosts restart because of global service file change
   if test "${globalservices[@]}" != "${oldglobalservices[@]}"; then
      echo "Global services changed, mark all for restart"
      restart=( ${ctids[*]} )
      echo -e "${globalservices[@]}" | runcmd ssh "${CTSERVER}" "cat > \"${CTSHARED}/services\""
   fi

   # Find hosts that need to be restarted because of services or routing change
   for hostid in "${!hostnames[@]}"; do
      for oldhostid in "${!oldhostnames[@]}"; do
         if test "${hostnames[$hostid]}" = "${oldhostnames[$oldhostid]}"; then
            test "${hostroutes[$hostid]}" != "${oldhostroutes[$oldhostid]}" && restart+=( ${ctids[$hostid]} )
            test "${hostservices[$hostid]}" != "${oldhostservices[$oldhostid]}" && restart+=( ${ctids[$hostid]} )
         fi
      done
   done

   # Find hosts that need to be created
   for hostid in "${!hostnames[@]}"; do
      if [[ ! " ${oldhostnames[@]} " =~ " ${hostnames[$hostid]} " ]]; then
         if test "${#ctids[*]}" -eq 0; then
            ctid="$CTIDSTART"
         else
            ctid=$(( "$( printf "%d\n" ${ctids[*]} | sort | tail -1 )" + 1 ))
         fi
         ctids[$hostid]="$ctid"
         echo "Create ${hostnames[$hostid]} $ctid"
         runcmd ssh "${CTSERVER}" "pct create $ctid ${ctcmds[$hostid]}"
      fi
   done

   # Generate deployed file
   for hostid in ${!hostnames[*]}; do
      echo "${ctids[$hostid]} ${hostnames[$hostid]}"
   done | runcmd ssh "$CTSERVER" "cat > \"${CTSHARED}\"/deployed"

   # Find hosts for which the config has changed
   recreate=()
   for hostid in "${!hostnames[@]}"; do
      for oldhostid in "${!oldhostnames[@]}"; do
         if test "${oldhostnames[$oldhostid]}" = "${hostnames[$hostid]}"; then
            test "${oldctcmds[$oldhostid]}" != "${ctcmds[$hostid]}" && recreate+=( $hostid )
            break
         fi
      done
   done
   for hostid in ${recreate[*]}; do
      echo "Recreating ${hostnames[$hostid]}"
      runcmd ssh "${CTSERVER}" "pct stop ${ctids[$hostid]}; pct destroy ${ctids[$hostid]}"
      runcmd ssh "${CTSERVER}" "pct create ${ctids[$hostid]} ${ctcmds[$hostid]}"
      for restartid in ${!restart[*]}; do
         test "${restart[$restartid]}" = "${ctids[$hostid]}" && unset restart[$restartid]
      done
   done

   # Restart hosts
   if test "${#restart[*]}" -gt 0; then 
      for ctid in $(printf "%d\n" ${restart[*]}| sort -u); do
         echo "Restarting container $ctid"
         runjob runcmd ssh "${CTSERVER}" "lxc-stop -n $ctid; lxc-start -n $ctid"
      done
      runend
   fi

   # Save new config
   declare -p globalservices hostsfile ctcmds hostroutes hostservices hostnames ctids | runcmd ssh "$CTSERVER" "cat > \"${CTSHARED}/config.cfg\""

   exit 0
}

runcmd() {
   test "$DRY" -eq 0 && { $@; return $?; }
   test "$DRY" -eq 1 && { echo $@; return 0; }
}

deploy() {
   # Sanity checks
   scriptloc=$(dirname $(realpath "$0"))
   test -e "$scriptloc/_pve-testenv.sh" || { echo "Unable to find _pve-testenv.sh"; exit 1; }

   tmplstorage="$(ssh "${CTSERVER}" "pvesm status --content vztmpl | sed -n '2 s/ .*//p'")"
   test "$tmplstorage" = "" && { echo "Unable to find template storage"; exit 1; }
   tmplpath="$(ssh "${CTSERVER}" "sed -n \"/^.*: ${tmplstorage}\$/ { :loop; n; s/^\tpath //p; T loop }\" /etc/pve/storage.cfg")"
   test "$tmplpath" = "" && { echo "Unable to find path for $tmplstorage"; exit 1; }
   test "$(ssh "${CTSERVER}" "ls ${tmplpath}/template/cache/${CTTEMPLATE}.tar.gz 2> /dev/null")" = "" && { echo "Template $CTTEMPLATE not found."; exit 1; }

   # Read configuration
   declare -A hosts nets ips links routes hostsignore services ctcmds gws
   declare -a globalservices hostroutes hostsfile hostservices hostnames

   parsedrawing "$1"
   generatectconfig

   echo "Configuring server.."
   runcmd ssh "${CTSERVER}" "mkdir -p \"${CTSHARED}\""

   if test "$PROXY" != ""; then
      runcmd ssh "${CTSERVER}" "cat - > /lib/systemd/system/pve-testenvproxy.service" <<-EOF
	[Unit]
	Description=PVE Testenv proxy
	After=network.target auditd.service
	
	[Service]
	ExecStart=socat unix-listen:${CTSHARED}/proxy,user=100000,group=100000,fork tcp:$PROXY
	Type=simple
	
	[Install]
	WantedBy=multi-user.target
	EOF
      runcmd ssh "$CTSERVER" "systemctl enable pve-testenvproxy.service > /dev/null; systemctl start pve-testenvproxy.service"
   fi

   runcmd scp -q "$scriptloc/_pve-testenv.sh" "$CTSERVER:/${CTSHARED}/pve-testenv.sh"
   runcmd ssh "$CTSERVER" "chown 100000:100000 \"${CTSHARED}/pve-testenv.sh\"; chmod 700 \"${CTSHARED}/pve-testenv.sh\"; rm -f \"${CTSHARED}/deployed\""
   runcmd ssh "$CTSERVER" "openssl req -sha256 -x509 -nodes -days 365 -newkey rsa:2048 -keyout ${CTSHARED}/cert.key -out ${CTSHARED}/cert.crt -subj \"/C=TS/ST=Test/L=Testing/O=Test/OU=Tester/CN=Test CA\" 2> /dev/null; chmod 644 ${CTSHARED}/cert.*"

   if test "${#globalservices[*]}" -ne 0; then
      for globalserviceid in "${globalservices[@]}"; do
         printf "%s\n" "${globalservices[@]}" | runcmd ssh "$CTSERVER" "cat >> \"${CTSHARED}/services\""
      done
   fi

   printf "%s\n" "127.0.0.1 localhost" "${hostsfile[@]}" | runcmd ssh "$CTSERVER" "cat > \"${CTSHARED}/hosts\""

   echo "done"

   echo "Deploying containers.."

   declare -a ctids
   CTID="$CTIDSTART"
   for ct in ${!ctcmds[@]}; do
      test "${hostroutes[$ct]}" != "" && echo -e "${hostroutes[$ct]/%\\n/}" | runcmd ssh "$CTSERVER" "cat > \"${CTSHARED}/routes-${hostnames[$ct]}\""
      test "${hostservices[$ct]}" != "" && echo -e "${hostservices[$ct]/%\\n/}" | runcmd ssh "$CTSERVER" "cat > \"${CTSHARED}/services-${hostnames[$ct]}\""
      echo "Creating container $CTID: ${hostnames[$ct]}:"
      runcmd ssh "$CTSERVER" "pct create $CTID ${ctcmds[$ct]}"
      runcmd ssh "$CTSERVER" "echo \"$CTID ${hostnames[$ct]}\" >> \"${CTSHARED}/deployed\""
      ctids[$ct]="$CTID"
      CTID=$(( CTID + 1 ))
      echo "done"
   done

   declare -p globalservices hostsfile ctcmds hostroutes hostservices hostnames ctids | runcmd ssh "$CTSERVER" "cat > \"${CTSHARED}/config.cfg\""

   echo done
}

CFGNAME=pvete.cfg
DRY=0
while getopts :dc: opt; do
   case $opt in
   c) CFGNAME="$OPTARG" ;;
   d) DRY=1 ;;
   \?) echo "Unknown option: -$OPTARG"; usage ;;
   :) echo "Option -$OPTARG requires argument"; usage ;;
   esac
done
shift $((OPTIND-1))

cfgloc=$(realpath "$0")
cfgloc=$(dirname "$cfgloc")
cfgfound=0
for cfgdir in "$cfgloc/" "$HOME/."; do
   test -e "${cfgdir}${CFGNAME}" && { . "${cfgdir}${CFGNAME}"; cfgfound=1; break ; }
done
test "$cfgfound" -eq 0 && { echo "No configuration file found"; usage; }
test "$CTJOBS" = "" && CTJOBS=2

test "$1" = "deploy" && { shift; deploy "$@"; exit 0; }
test "$1" = "createtemplate" && { shift; createtemplate; exit 0; }

declare -A cts
getcts

case "$1" in
"modify")
   shift
   modify "$@"
;;
"parse")
   shift
   parse "$@"
;;
"list")
   for ctid in "${!cts[@]}"; do
      echo "${cts[$ctid]} ($ctid)";
   done
;;
"exec")
   id=$(getctid "$2") || { echo "$id"; exit 1; }
   shift 2
   ssh "${CTSERVER}" "pct exec $id -- $@"
;;
"execall")
   shift
   for ctid in "${!cts[@]}"; do
      ssh "${CTSERVER}" "pct exec $ctid -- $@"
   done
;;
"enter")
   id=$(getctid "$2") || { echo "$id"; exit 1; }
   ssh -t "${CTSERVER}" "pct enter $id"
;;
"restart")
   id=$(getctid "$2") || { echo "$id"; exit 1; }
   ssh "${CTSERVER}" "lxc-stop -n $id; lxc-start -n $id"
;;
"restartall")
   echo -n "Restarting container"
   for ctid in "${!cts[@]}"; do
      echo -n " ${cts[$ctid]}"
      runjob runcmd ssh "${CTSERVER}" "lxc-stop -n $ctid; lxc-start -n $ctid"
   done
   runend
   echo
;;
"startall")
   echo -n "Starting container"
   for ctid in "${!cts[@]}"; do
      echo -n " ${cts[$ctid]}"
      runjob runcmd ssh "${CTSERVER}" "lxc-start -n $ctid"
   done
   runend
   echo
;;
"stopall")
   echo -n "Stopping container"
   for ctid in "${!cts[@]}"; do
      echo -n " ${cts[$ctid]}"
      runjob runcmd ssh "${CTSERVER}" "lxc-stop -n $ctid"
   done
   runend
   echo
;;
"destroyall")
   echo -n "Destroying container"
   for ctid in "${!cts[@]}"; do
      echo -n " ${cts[$ctid]}"
      ssh "${CTSERVER}" "pct stop $ctid 2> /dev/null; pct destroy $ctid"
   done
   echo
   if test "$PROXY" != ""; then
      echo -n "Stopping proxy service.."
      ssh "${CTSERVER}" "systemctl stop pve-testenvproxy.service; rm -f /lib/systemd/system/pve-testenvproxy.service" || { echo "error"; exit 1; }
      echo "done"
   fi
   echo -n "Removing shared files.."
   ssh "${CTSERVER}" "rm -rf ${CTSHARED}" || { echo "error"; exit 1; }
   echo "done"
;;
*) echo "Unknown option $1"; usage
;;
esac
