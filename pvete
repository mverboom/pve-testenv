#!/usr/bin/env bash

declare -A BRIDGE

usage() {
   echo "$0 <option> <command>"
   echo
   echo "  -c <cfgfile>       Use specific config file"
   echo "  -d                 Dryrun, don't execute"
   echo "  deploy <drawing>   Deploy containers accoring to drawio drawing"
   echo "  list               Show deployed containers"
   echo "  enter <name>       Start shell on container"
   echo "  exec <name> <cmd>  Execute cmd in container"
   echo "  execall <cmd>      Execute cmd in all containers"
   echo "  restart <name>     Restart container"
   echo "  restartall         Restart all containers"
   echo "  startall           Start all containers"
   echo "  stopall            Stop all containers"
   echo "  destroyall         Destroy all containers and supporting services"
   exit 1
}

getcts() {
   while read -r ctid ctname; do
      cts[$ctid]="$ctname"
   done < <( ssh "${CTSERVER}" "cat ${CTSHARED}/deployed" 2> /dev/null)
   test "${#cts[*]}" -eq 0 && { echo "No deployed containers found"; usage; }
}

getctid() {
   local id=0
   for ctid in "${!cts[@]}"; do
      test "${cts[$ctid]}" = "$1" && { id="$ctid"; break; }
   done
   test "$id" = "0" && { echo "Host $1 not found"; usage; }
   echo "$id"
}

findbridge() {
   net="$1"
   bridge="${BRIDGE[default]}"
   for brname in "${!BRIDGE[@]}";do
      [[ " ${BRIDGE[$brname]} " =~ " ${net} " ]] && bridge="$brname"
   done
   echo "$bridge"
}

deploy() {
   scriptloc=$(dirname $(realpath "$0"))
   test -e "$scriptloc/pve-testenv.sh" || { echo "Unable to find pve-testenv.sh"; exit 1; }

   tmplstorage="$(ssh "${CTSERVER}" "pvesm status --content vztmpl | sed -n '2 s/ .*//p'")"
   test "$tmplstorage" = "" && { echo "Unable to find template storage"; exit 1; }
   tmplpath="$(ssh "${CTSERVER}" "sed -n \"/^.*: ${tmplstorage}\$/ { :loop; n; s/^\tpath //p; T loop }\" /etc/pve/storage.cfg")"
   test "$tmplpath" = "" && { echo "Unable to find path for $tmplstorage"; exit 1; }
   test "$(ssh "${CTSERVER}" "ls ${tmplpath}/template/cache/${CTTEMPLATE}.tar.gz 2> /dev/null")" = "" && { echo "Template $CTTEMPLATE not found."; exit 1; }

   test "$DRY" -eq 0 && { ssh "${CTSERVER}" "mkdir -p \"$CTSHARED\"" || { echo "Unable to create $CTSHARED on $CTSERVER"; exit 1; } }

   drawio="$1"
   ! test -e "$drawio" && { echo "Unable to load drawing."; exit 1; }

   echo -n "Converting network drawing..."
   declare -A hosts nets ips links routes hostsignore
   while read -r line; do
      id=$(echo "$line" | sed -n 's/.*id="\([^"]\+\)" .*/\1/p')
      test "${id}" = "1" && continue
      value=$(echo "$line" | sed -n 's/.*value="\([^"]*\)" .*/\1/p' | sed 's/&lt;[/]*div&gt;/@/g' | sed 's/&[lg]t;/#/g; s/#[^#]*#//g' | sed 's/@@/@/g; s/@$//; s/^@//')
      shape=$(echo "$line" | sed -n 's/.*shape=\([^\;]*\).*/\1/p')
      srcid=$(echo "$line" | sed -n 's/.*source="\([^"]\+\)".*/\1/p')
      tgtid=$(echo "$line" | sed -n 's/.*target="\([^"]\+\)".*/\1/p')
      parent=$(echo "$line" | sed -n 's/.*parent="\([^"]\+\)".*/\1/p')
      ignore=$(echo "$line" | sed -n 's/.*\(dashed=1\).*/\1/p')
      label=$(echo "$line" | sed -n 's/.*\(edgeLabel\).*/\1/p')
      if test "$label" != ""; then
         ips[$parent]="${value}"
      elif test "$value" != ""; then
         if test "$shape" = "cloud"; then # Cloud shape is a vlan
            nets[$id]="${value/@*/}"
         elif test "$shape" = "document"; then # Document is routing table
            routes[$id]="$value"
         elif test "${parent}" = "1"; then # this is a host
            hosts[$id]="${value/@*/}"
            test -n "$ignore" && hostsignore[$id]="$value"
         fi
      else
         # This is a link between objects
         links[$id]="@${srcid}@${tgtid}@"
      fi
   done < <( grep '<mxCell' "$drawio" )

   # Search for default gateways per vlan
   declare -A gws
   for netid in "${!nets[@]}"; do
      for linkid in "${!links[@]}"; do
         if test "$( echo "${links[$linkid]}" | grep "@${netid}@")" != ""; then
            test "${ips[$linkid]/ gw/}" = "${ips[$linkid]}" && continue
            gws[${nets[$netid]}]="${ips[$linkid]/\/*/}"
         fi
      done
   done
   echo "done"

   echo -n "Generating configuration..."
   if test "$DRY" -eq 0 -a "$PROXY" != ""; then
      ssh "${CTSERVER}" "cat - > /lib/systemd/system/pve-testenvproxy.service" <<-EOF
	[Unit]
	Description=PVE Testenv proxy
	After=network.target auditd.service
	
	[Service]
	ExecStart=socat unix-listen:${CTSHARED}/proxy,user=100000,group=100000,fork tcp:$PROXY
	Type=simple
	
	[Install]
	WantedBy=multi-user.target
	EOF
      #cat pve-testenvproxy.service | sed "s#SHARED#$CTSHARED/proxy#; s#PROXY#$PROXY#" | ssh "${CTSERVER}" "cat - > /lib/systemd/system/pve-testenvproxy.service"
      ssh "$CTSERVER" "systemctl enable pve-testenvproxy.service > /dev/null; systemctl start pve-testenvproxy.service"
   fi
   test "$DRY" -eq 0 && ssh "$CTSERVER" "echo \"127.0.0.1 localhost\" > \"${CTSHARED}/hosts\""
   test "$DRY" -eq 0 && scp -q "$scriptloc/pve-testenv.sh" "$CTSERVER:/${CTSHARED}/"
   test "$DRY" -eq 0 && { ssh "$CTSERVER" "chown 100000:100000 \"${CTSHARED}/pve-testenv.sh\"; chmod 700 \"${CTSHARED}/pve-testenv.sh\"; rm -f \"${CTSHARED}/deployed\""; }
   
   declare -A ctcmds
   
   CTID="$CTIDSTART"
   
   for hostid in "${!hosts[@]}"; do
      unset ctcreate
      ctcreate=( pct create "${CTID}" "$tmplstorage:vztmpl/${CTTEMPLATE}.tar.gz" --hostname ${hosts[$hostid]} )
      cthostnames[$CTID]="${hosts[$hostid]}"
      test "$DRY" -eq 0 && ssh "$CTSERVER" "echo \"$CTID ${hosts[$hostid]}\" >> \"${CTSHARED}/deployed\""
      routing=0
      ifs=0
      # Find routing tables
      for linkid in "${!links[@]}"; do
         if test "$( echo "${links[$linkid]}" | grep "@${hostid}@")" != ""; then
            for connid in ${links[$linkid]//@/ }; do
               if test "${routes[$connid]}" != ""; then
                  test "$DRY" -eq 0 && ssh "$CTSERVER" "echo -e \"${routes[$connid]//@/\\n}\" > \"${CTSHARED}/routes-${hosts[$hostid]}\""
                  routing=1
               fi
            done
	 fi
      done
      # Find network interfaces
      for linkid in "${!links[@]}"; do
         if test "$( echo "${links[$linkid]}" | grep "@${hostid}@")" != ""; then
            for connid in ${links[$linkid]//@/ }; do
               net="${nets[$connid]}"
               if test "$net" != ""; then
                  ifcfg="name=${net},bridge=$(findbridge "$net")"
                  test "${ips[$linkid]}" != "" && ifcfg="${ifcfg},ip=${ips[$linkid]/ gw/}"
                  test "$DRY" -eq 0 && ssh "$CTSERVER" "echo \"${ips[$linkid]/\/*/} ${hosts[$hostid]}-${net}\" >> \"${CTSHARED}/hosts\""
                  test "$routing" -eq 0 -a "${gws[$net]}" != "" && ifcfg="${ifcfg},gw=${gws[$net]}"
                  test "${net/vlan/}" != "${net}" && ifcfg="${ifcfg},tag=${net/vlan/}"
                  ctcreate+=( "--net${ifs}" "$ifcfg" )
                  ifs=$(( ifs + 1 ))
               fi
            done
         fi
      done
      ctcreate+=( --onboot 1 --start 1 --rootfs "${CTROOTFS:-pve}:${CTROOTSIZE:-1}" --memory "${CTMEM:-1024}" --cores "${CTCORES:-1}" --unprivileged 1 --mp0 "$CTSHARED,mp=/shared" ${CTOPTIONS[@]} )
      test "${hostsignore[$hostid]}" = "" && { ctcmds[$CTID]="${ctcreate[*]}"; CTID=$(( CTID + 1 )); }
   done
   echo "done"

   for ctid in "${!ctcmds[@]}"; do
      echo -n "Deploying container $ctid for host ${cthostnames[$ctid]}..."
      test "$DRY" -eq 0 && { ssh "$CTSERVER" "${ctcmds[$ctid]}" > /dev/null 2>&1 || { echo "error"; exit 1; } }
      test "$DRY" -eq 1 && echo "${ctcmds[$ctid]}"
      echo "done"
   done
}

CFGNAME=pvete.cfg
DRY=0
while getopts :dc: opt; do
   case $opt in
   c) CFGNAME="$OPTARG" ;;
   d) DRY=1 ;;
   \?) echo "Unknown option: -$OPTARG"; usage ;;
   :) echo "Option -$OPTARG requires argument"; usage ;;
   esac
done
shift $((OPTIND-1))

cfgloc=$(realpath "$0")
cfgloc=$(dirname "$cfgloc")
cfgfound=0
for cfgdir in "$cfgloc/" "$HOME/."; do
   test -e "${cfgdir}${CFGNAME}" && { . "${cfgdir}${CFGNAME}"; cfgfound=1; break ; }
done
test "$cfgfound" -eq 0 && { echo "No configuration file found"; usage; }

test "$1" = "deploy" && { shift; deploy "$@"; exit 0; }

declare -A cts
getcts

case "$1" in
"list")
   for ctid in "${!cts[@]}"; do
      echo "${cts[$ctid]} ($ctid)";
   done
;;
"exec")
   id=$(getctid "$2") || { echo "$id"; exit 1; }
   shift 2
   ssh -t "${CTSERVER}" "pct exec $id -- $@"
;;
"execall")
   shift
   for ctid in "${!cts[@]}"; do
      ssh "${CTSERVER}" "pct exec $ctid -- $@"
   done
;;
"enter")
   id=$(getctid "$2") || { echo "$id"; exit 1; }
   ssh -t "${CTSERVER}" "pct enter $id"
;;
"restart")
   id=$(getctid "$2") || { echo "$id"; exit 1; }
   ssh "${CTSERVER}" "pct stop $id; pct start $id"
;;
"restartall")
   echo -n "Restarting container"
   for ctid in "${!cts[@]}"; do
      echo -n " ${cts[$ctid]}"
      ssh "${CTSERVER}" "pct stop $ctid; pct start $ctid"
   done
   echo
;;
"startall")
   echo -n "Starting container"
   for ctid in "${!cts[@]}"; do
      echo -n " ${cts[$ctid]}"
      ssh "${CTSERVER}" "pct start $ctid"
   done
   echo
;;
"stopall")
   echo -n "Stopping container"
   for ctid in "${!cts[@]}"; do
      echo -n " ${cts[$ctid]}"
      ssh "${CTSERVER}" "pct stop $ctid"
   done
   echo
;;
"destroyall")
   echo -n "Destroying container"
   for ctid in "${!cts[@]}"; do
      echo -n " ${cts[$ctid]}"
      ssh "${CTSERVER}" "pct stop $ctid 2> /dev/null; pct destroy $ctid"
   done
   echo
   if test "$PROXY" != ""; then
      echo -n "Stopping proxy service.."
      ssh "${CTSERVER}" "systemctl stop pve-testenvproxy.service; rm -f /lib/systemd/system/pve-testenvproxy.service" || { echo "error"; exit 1; }
      echo "done"
   fi
   echo -n "Removing shared files.."
   ssh "${CTSERVER}" "rm -rf ${CTSHARED}" || { echo "error"; exit 1; }
   echo "done"
;;
*) echo "Unknown option $1"; usage
;;
esac
